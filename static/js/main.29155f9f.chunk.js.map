{"version":3,"sources":["components/ContactForm/ContactForm.stylad.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.stylad.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Box.js","components/App.js","components/helpers.js","index.js"],"names":["FormLable","styled","label","FormButton","button","ContactForm","onSubmit","useState","name","setName","number","setNumber","reset","e","preventDefault","value","onChange","currentTarget","type","pattern","title","required","List","ul","Item","li","ItemText","p","Button","ContactItem","id","onDeleteContact","onClick","ContactList","contacts","map","FilterLabel","FilteInput","input","Filter","placeholder","Box","color","space","layout","flexbox","grid","background","border","position","App","setContacts","filter","setFilter","useEffect","parsedContacts","key","items","localStorage","getItem","JSON","parse","error","Error","getFromLS","setItem","stringify","saveToLS","display","alignItems","flexDirection","contact","uuidv4","normolizedName","toLowerCase","find","alert","normolizedFiter","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29155f9f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const FormLable = styled.label`\n\tfont-size: 20px;\n\tmargin: 10px;\n\tpadding: 5px;\n\ttext-decoration: solid;\n\tcolor: rgb(107, 41, 41);\n`;\n\nexport const FormButton = styled.button`\n\tmargin-left: 20px;\n\tborder-radius: 10px;\n\tpadding: 5px 15px;\n\tbackground-color: rgb(236, 145, 145);\n\tcursor: pointer;\n`;\n","import { FormLable } from './ContactForm.stylad';\nimport { FormButton } from './ContactForm.stylad';\n\nimport { useState } from 'react';\n\nfunction ContactForm({ onSubmit }) {\n\tconst [name, setName] = useState('');\n\tconst [number, setNumber] = useState('');\n\n\tconst addContact = e => {\n\t\te.preventDefault();\n\t\tonSubmit({ name, number });\n\t\treset();\n\t};\n\tconst handleChangeName = e => {\n\t\tconst { value } = e.currentTarget;\n\t\tsetName(value);\n\t};\n\tconst handleChangeNumber = e => {\n\t\tconst { value } = e.currentTarget;\n\t\tsetNumber(value);\n\t};\n\tconst reset = () => {\n\t\tsetName('');\n\t\tsetNumber('');\n\t};\n\treturn (\n\t\t<form onSubmit={addContact}>\n\t\t\t<FormLable>\n\t\t\t\tName:\n\t\t\t\t<input\n\t\t\t\t\tvalue={name}\n\t\t\t\t\tonChange={handleChangeName}\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"name\"\n\t\t\t\t\tpattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n\t\t\t\t\ttitle=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t</FormLable>\n\n\t\t\t<FormLable>\n\t\t\t\tTel:\n\t\t\t\t<input\n\t\t\t\t\tvalue={number}\n\t\t\t\t\tonChange={handleChangeNumber}\n\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\tname=\"number\"\n\t\t\t\t\tpattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n\t\t\t\t\ttitle=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t</FormLable>\n\t\t\t<FormButton type=\"submit\">Add contact</FormButton>\n\t\t</form>\n\t);\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n\ttext-decoration: none;\n\tdisplay: flex;\n\tflex-wrap: wrap;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n\tmargin: 10px;\n\ttext-decoration: underline;\n`;\n\nexport const ItemText = styled.p`\n\tcolor: rgb(67, 69, 219);\n`;\n\nexport const Button = styled.button`\n\ttext-align: center;\n\tborder-radius: 10px;\n\tpadding: 5px 15px;\n\tbackground-color: rgb(236, 145, 145);\n\tcursor: pointer;\n`;\n","import PropTypes from 'prop-types';\nimport { Item } from './ContactItem.stylad';\nimport { ItemText } from './ContactItem.stylad';\nimport { Button } from './ContactItem.stylad';\n\nconst ContactItem = ({ id, name, number, onDeleteContact }) => (\n\t<Item>\n\t\t<ItemText>{name}</ItemText>\n\t\t<ItemText>{number}</ItemText>\n\t\t<Button onClick={() => onDeleteContact(id)}>Delete</Button>\n\t</Item>\n);\n\nContactItem.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tname: PropTypes.string.isRequired,\n\tnumber: PropTypes.string.isRequired,\n\tonDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport { List } from './ContactList.styled';\nimport ContactItem from '../ContactItem/ContactItem';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n\t<List>\n\t\t{contacts.map(({ id, name, number }) => (\n\t\t\t<ContactItem\n\t\t\t\tkey={id}\n\t\t\t\tid={id}\n\t\t\t\tname={name}\n\t\t\t\tnumber={number}\n\t\t\t\tonDeleteContact={onDeleteContact}\n\t\t\t/>\n\t\t))}\n\t</List>\n);\n\nContactList.propTypes = {\n\tcontacts: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tid: PropTypes.string.isRequired,\n\t\t\tname: PropTypes.string.isRequired,\n\t\t\tnumber: PropTypes.string.isRequired,\n\t\t}),\n\t),\n\tonDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n\tcolor: rgb(233, 80, 80);\n\ttext-align: center;\n`;\n\nexport const FilteInput = styled.input`\n\ttext-align: center;\n\tmargin-right: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { FilterLabel } from './Filter.styled';\nimport { FilteInput } from './Filter.styled';\n\nconst Filter = ({ value, onChange }) => (\n\t<FilterLabel>\n\t\tFind contacts by name\n\t\t<FilteInput\n\t\t\ttype=\"text\"\n\t\t\tvalue={value}\n\t\t\tonChange={onChange}\n\t\t\tplaceholder=\"Name contact\"\n\t\t/>\n\t</FilterLabel>\n);\n\nFilter.propTypes = {\n\tvalue: PropTypes.string,\n\tonChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import styled from 'styled-components';\nimport {\n\tcolor,\n\tspace,\n\tlayout,\n\tflexbox,\n\tgrid,\n\tbackground,\n\tborder,\n\tposition,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n\tcolor,\n\tspace,\n\tlayout,\n\tflexbox,\n\tgrid,\n\tbackground,\n\tborder,\n\tposition,\n);\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { saveToLS, getFromLS } from 'components/helpers';\nimport { Box } from './Box';\n\nfunction App() {\n\tconst [contacts, setContacts] = useState([]);\n\tconst [filter, setFilter] = useState('');\n\n\tuseEffect(() => {\n\t\tconst parsedContacts = getFromLS('contacts');\n\t\tif (parsedContacts) {\n\t\t\tsetContacts(parsedContacts);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tsaveToLS('contacts', contacts);\n\t}, [contacts]);\n\n\tconst addContact = ({ name, number }) => {\n\t\tconst contact = {\n\t\t\tid: uuidv4(),\n\t\t\tname,\n\t\t\tnumber,\n\t\t};\n\n\t\tconst normolizedName = name.toLowerCase();\n\t\tif (\n\t\t\tcontacts.find(contact => contact.name.toLowerCase() === normolizedName)\n\t\t) {\n\t\t\treturn alert(`${name} is already in contacts`);\n\t\t}\n\n\t\tsetContacts([...contacts, contact]);\n\t};\n\n\tconst changeFilter = e => {\n\t\tsetFilter(e.currentTarget.value);\n\t};\n\n\tconst getVisibleContacts = () => {\n\t\tconst normolizedFiter = filter.toLowerCase();\n\t\treturn contacts.filter(contact =>\n\t\t\tcontact.name.toLowerCase().includes(normolizedFiter),\n\t\t);\n\t};\n\n\tconst deleteContact = contactId => {\n\t\tsetContacts(contacts =>\n\t\t\tcontacts.filter(contact => contact.id !== contactId),\n\t\t);\n\t};\n\treturn (\n\t\t<Box display=\"flex\" alignItems=\"center\" flexDirection=\"column\">\n\t\t\t<Box>\n\t\t\t\t<h1>Phonebook</h1>\n\t\t\t\t<ContactForm onSubmit={addContact} />\n\t\t\t\t<h2>Contacts </h2>\n\t\t\t\t<Filter value={filter} onChange={changeFilter} />\n\t\t\t\t<ContactList\n\t\t\t\t\tcontacts={getVisibleContacts()}\n\t\t\t\t\tonDeleteContact={deleteContact}\n\t\t\t\t/>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}\nexport default App;\n","export const saveToLS = (key, value) => {\n\ttry {\n\t\tlocalStorage.setItem(key, JSON.stringify(value));\n\t} catch (error) {\n\t\tthrow new Error();\n\t}\n};\n\nexport const getFromLS = key => {\n\ttry {\n\t\tconst items = localStorage.getItem(key);\n\t\treturn items ? JSON.parse(items) : null;\n\t} catch (error) {\n\t\tthrow new Error();\n\t}\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}